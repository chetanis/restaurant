generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  name         String
  last_name    String
  phone_number String
  username     String        @unique
  password     String
  role         Role
  orders       Order[] // Relation to orders taken by this user
}

enum Role {
  KITCHEN
  WAITER
  CASHIER
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String
  meals Meal[]
}

model Meal {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  price       Float
  categoryId  Int
  category    Category    @relation(fields: [categoryId], references: [id])
  items       OrderItem[] // Relation to all order items for this meal
}

model Table {
  id             Int         @id @default(autoincrement())
  number         Int
  numberOfChairs Int
  status         TableStatus
  orders         Order[] // Relation to all orders for this table
  currentOrderId Int?        @unique // Can be null when no order is active
  currentOrder   Order?      @relation("CurrentTableOrder", fields: [currentOrderId], references: [id])
}

enum TableStatus {
  FREE
  OCCUPIED
}

model Order {
  id                Int           @id @default(autoincrement())
  dailyOrderNumber  Int
  tableId           Int
  table             Table         @relation(fields: [tableId], references: [id])
  waiterId          String // Foreign key to User model
  waiter            User          @relation(fields: [waiterId], references: [id])
  status            OrderStatus
  items             OrderItem[]
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  printedForKitchen Boolean       @default(false)
  currentTable      Table?        @relation("CurrentTableOrder")
  totalAmount       Float         @default(0) // Total amount for the entire order
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model OrderItem {
  id            Int          @id @default(autoincrement())
  mealId        Int
  meal          Meal         @relation(fields: [mealId], references: [id])
  orderId       Int?
  order         Order?       @relation(fields: [orderId], references: [id])
  quantity      Int
  notes         String?
  price         Float // Price at the time of ordering
}
